plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'io.freefair.lombok' version '8.3'
	id 'com.diffplug.spotless' version '6.20.0'
	id 'nu.studer.jooq' version '8.2'
	id 'com.bmuschko.docker-remote-api' version '9.3.2'
	id 'org.flywaydb.flyway' version '9.22.0'
}


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerKillContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import org.flywaydb.gradle.task.FlywayMigrateTask

group = 'com.czosnek'


repositories {
	mavenCentral()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

sourceSets {
	main {
		java {
			srcDir "${buildDir.absolutePath}/generated-src/jooq"
		}
	}
}

spotless {
	java {
		importOrder()
		toggleOffOn()
		googleJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.jooq:jooq:3.18.6'
	testImplementation 'io.rest-assured:rest-assured:5.3.1'
	implementation 'org.testcontainers:postgresql:1.19.0'
	implementation 'com.zaxxer:HikariCP:5.0.1'
	implementation 'org.flywaydb:flyway-core:9.22.0'
	jooqGenerator 'org.postgresql:postgresql:42.6.0' // REQUIRED!!
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('pullPostgresImage', DockerPullImage) {
	image = 'postgres:15.4-alpine'
}

tasks.register('createPostgresContainer', DockerCreateContainer) {
	dependsOn pullPostgresImage
	imageId = pullPostgresImage.getImage()
	hostConfig.portBindings = ['5432:5432']
	hostConfig.autoRemove = true
	envVars = [POSTGRES_USER: 'user', POSTGRES_PASSWORD: 'password', POSTGRES_DB: 'postgres']
}

tasks.register('startPostgresContainer', DockerStartContainer) {
	dependsOn createPostgresContainer
	targetContainerId createPostgresContainer.getContainerId()
}

tasks.register('migratePostgres', FlywayMigrateTask) {
	dependsOn startPostgresContainer
	connectRetries = 10
	connectRetriesInterval = 30
	url = 'jdbc:postgresql://localhost:5432/postgres'
	user = 'user'
	password = 'password'
}

tasks.register('killPostgresContainer', DockerKillContainer) {
	shouldRunAfter createPostgresContainer
	targetContainerId createPostgresContainer.getContainerId()
}

jooq {
	configurations {
		main {
			generationTool {
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/postgres'
					user = 'user'
					password = 'password'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
					}
					target {
						packageName = 'com.czosnek.jooq'
					}
				}
			}
		}
	}
}

tasks.named('generateJooq').configure {
	dependsOn migratePostgres
	finalizedBy killPostgresContainer
}